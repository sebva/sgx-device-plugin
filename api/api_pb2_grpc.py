# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from api import api_pb2 as api__pb2


class RegistrationStub(object):
  """Registration is the service advertised by the Kubelet
  Only when Kubelet answers with a success code to a Register Request
  may Device Plugins start their service
  Registration may fail when device plugin version is not supported by
  Kubelet or the registered resourceName is already taken by another
  active device plugin. Device plugin is expected to terminate upon registration failure
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Register = channel.unary_unary(
        '/v1beta1.Registration/Register',
        request_serializer=api__pb2.RegisterRequest.SerializeToString,
        response_deserializer=api__pb2.Empty.FromString,
        )


class RegistrationServicer(object):
  """Registration is the service advertised by the Kubelet
  Only when Kubelet answers with a success code to a Register Request
  may Device Plugins start their service
  Registration may fail when device plugin version is not supported by
  Kubelet or the registered resourceName is already taken by another
  active device plugin. Device plugin is expected to terminate upon registration failure
  """

  def Register(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RegistrationServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Register': grpc.unary_unary_rpc_method_handler(
          servicer.Register,
          request_deserializer=api__pb2.RegisterRequest.FromString,
          response_serializer=api__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'v1beta1.Registration', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DevicePluginStub(object):
  """DevicePlugin is the service advertised by Device Plugins
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetDevicePluginOptions = channel.unary_unary(
        '/v1beta1.DevicePlugin/GetDevicePluginOptions',
        request_serializer=api__pb2.Empty.SerializeToString,
        response_deserializer=api__pb2.DevicePluginOptions.FromString,
        )
    self.ListAndWatch = channel.unary_stream(
        '/v1beta1.DevicePlugin/ListAndWatch',
        request_serializer=api__pb2.Empty.SerializeToString,
        response_deserializer=api__pb2.ListAndWatchResponse.FromString,
        )
    self.Allocate = channel.unary_unary(
        '/v1beta1.DevicePlugin/Allocate',
        request_serializer=api__pb2.AllocateRequest.SerializeToString,
        response_deserializer=api__pb2.AllocateResponse.FromString,
        )
    self.PreStartContainer = channel.unary_unary(
        '/v1beta1.DevicePlugin/PreStartContainer',
        request_serializer=api__pb2.PreStartContainerRequest.SerializeToString,
        response_deserializer=api__pb2.PreStartContainerResponse.FromString,
        )


class DevicePluginServicer(object):
  """DevicePlugin is the service advertised by Device Plugins
  """

  def GetDevicePluginOptions(self, request, context):
    """GetDevicePluginOptions returns options to be communicated with Device
    Manager
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListAndWatch(self, request, context):
    """ListAndWatch returns a stream of List of Devices
    Whenever a Device state change or a Device disapears, ListAndWatch
    returns the new list
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Allocate(self, request, context):
    """Allocate is called during container creation so that the Device
    Plugin can run device specific operations and instruct Kubelet
    of the steps to make the Device available in the container
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PreStartContainer(self, request, context):
    """PreStartContainer is called, if indicated by Device Plugin during registeration phase,
    before each container start. Device plugin can run device specific operations
    such as reseting the device before making devices available to the container
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DevicePluginServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetDevicePluginOptions': grpc.unary_unary_rpc_method_handler(
          servicer.GetDevicePluginOptions,
          request_deserializer=api__pb2.Empty.FromString,
          response_serializer=api__pb2.DevicePluginOptions.SerializeToString,
      ),
      'ListAndWatch': grpc.unary_stream_rpc_method_handler(
          servicer.ListAndWatch,
          request_deserializer=api__pb2.Empty.FromString,
          response_serializer=api__pb2.ListAndWatchResponse.SerializeToString,
      ),
      'Allocate': grpc.unary_unary_rpc_method_handler(
          servicer.Allocate,
          request_deserializer=api__pb2.AllocateRequest.FromString,
          response_serializer=api__pb2.AllocateResponse.SerializeToString,
      ),
      'PreStartContainer': grpc.unary_unary_rpc_method_handler(
          servicer.PreStartContainer,
          request_deserializer=api__pb2.PreStartContainerRequest.FromString,
          response_serializer=api__pb2.PreStartContainerResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'v1beta1.DevicePlugin', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
